def newton_method_modified(f,p0):
#f must be a sympy function or  p_0 must be choosen such that f'(p0) != 0

  iteration = 0
  max_iteration = 100

  # We combinate two stop criterion
  error_x = 1
  error_f = 1

  x = sp.symbols("x")

  p0_aux = float(p0)

  precision = 10**(-10)
  while ( (error_x > precision) or (error_f > precision) ) and (iteration < max_iteration):
    d = sp.diff(f(x), x)   
    d2 = sp.diff(d,x) 

    aux1 = f(p0_aux)*d.subs(x,p0_aux)
    aux2 = (d.subs(x,p0_aux))*(d.subs(x,p0_aux)) - f(p0_aux)*d2.subs(x,p0_aux)
    
    p = p0_aux - aux1/aux2
    print(p_{iteration + 1} = {p, |f(p)| =  {abs(f(p))}')
    error_x = abs(p - p0_aux)
    error_f = abs( f(p) - f(p0_aux) )
    iteration += 1
    p0_aux = p
  return p
